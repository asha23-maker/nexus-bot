# nexus_bot.py
import os
import json
import logging
from typing import List

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from nexus_content import NEXUS_DATA

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("nexus-bot")

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set! Add it in Railway ‚Üí Variables.")

# –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç.
ADMIN_ID = int(os.getenv("ADMIN_ID", "817635625"))

USERS_FILE = "users.json"   # –∑–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º chat_id –≤—Å–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É

WELCOME_TEXT = (
    "üåê *Welcome to Nexus Navigator Bot!*\n\n"
    "This bot helps newcomers learn the basics of Nexus.\n"
    "Vision & Mission, Architecture & Core Components, Community, Research & Leadership and useful links.\n\n"
    "*Choose a category:*"
)

# ----------------- –•–†–ê–ù–ò–õ–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô -----------------
def load_users() -> List[int]:
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.warning(f"Failed to load users.json: {e}")
        return []

def save_users(users: List[int]) -> None:
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f)
    except Exception as e:
        logger.error(f"Failed to save users.json: {e}")

def remember_user(chat_id: int) -> None:
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        save_users(users)

# ----------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ -----------------
def main_menu_markup() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("üß≠ How to start", callback_data="howto")],
        [InlineKeyboardButton("üí° Vision & Mission", callback_data="vision")],
        [InlineKeyboardButton("üèóÔ∏è Architecture", callback_data="architecture")],
        [InlineKeyboardButton("‚ú® Testnet III", callback_data="testnet")],
        [InlineKeyboardButton("ü§ù Community & Team", callback_data="community")],
        [InlineKeyboardButton("üìÖ Events & Blog", callback_data="events")],
        [InlineKeyboardButton("üîó Official Links", callback_data="links")],
        [InlineKeyboardButton("‚ö†Ô∏è Disclaimer", callback_data="disclaimer")],
    ]
    return InlineKeyboardMarkup(kb)

def back_menu_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîô Back to menu", callback_data="back_to_menu")]]
    )

# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    chat_id = update.effective_chat.id
    remember_user(chat_id)

    if update.message:  # –æ–±—ã—á–Ω—ã–π /start
        await update.message.reply_text(
            WELCOME_TEXT, reply_markup=main_menu_markup(), parse_mode="Markdown"
        )
    elif update.callback_query:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await update.callback_query.edit_message_text(
            WELCOME_TEXT, reply_markup=main_menu_markup(), parse_mode="Markdown"
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_to_menu":
        await query.edit_message_text(
            WELCOME_TEXT, reply_markup=main_menu_markup(), parse_mode="Markdown"
        )
        return

    # –õ—é–±–∞—è —Å–µ–∫—Ü–∏—è –∏–∑ NEXUS_DATA
    content = NEXUS_DATA.get(data)
    if content:
        await query.edit_message_text(
            text=content,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=back_menu_markup(),
        )
    else:
        await query.edit_message_text(
            WELCOME_TEXT, reply_markup=main_menu_markup(), parse_mode="Markdown"
        )

async def register_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ chat_id (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)."""
    remember_user(update.effective_chat.id)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID).
       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç: –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ '/broadcast' ‚Äî –∏–¥—ë—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå You are not allowed to use this command.")
        return

    # –ë–µ—Ä—ë–º –í–°–Å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É '/broadcast'
    full_text = update.message.text or ""
    msg = full_text[len("/broadcast"):].strip()

    if not msg:
        await update.message.reply_text(
            "Usage:\n/broadcast <your message>\n\n"
            "–ú–æ–∂–Ω–æ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
            "/broadcast –ü—Ä–∏–≤–µ—Ç!\n–°–µ–≥–æ–¥–Ω—è –∞–ø–¥–µ–π—Ç:\n- –ü—É–Ω–∫—Ç 1\n- –ü—É–Ω–∫—Ç 2"
        )
        return

    users = load_users()
    sent = 0

    for uid in users:
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
            sent += 1
        except Exception as e:
            logger.warning(f"Failed to send to {uid}: {e}")

    await update.message.reply_text(f"‚úÖ Broadcast sent to {sent} users.")

# ----------------- MAIN -----------------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("broadcast", broadcast))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –õ—é–±–æ–µ –ù–ï-–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, register_any_message))

    logger.info("Nexus Bot started‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
